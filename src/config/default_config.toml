# All alternatives are listed in `color_theme_presets!(...)` in `src/config/color_theme.rs`
color_theme_preset = "Basic"

# Automatically reloads config when local config file is modified.
# This options itself does not support hot reloading.
autoreload_config = true

# Can be disabled so keystroke used to close message popup is also passed through as normal
message_popup_suppress_keystroke = true

# Sets "n" as standard input mode
input_mode_standard = "n"

# Sets input mode to "n" at launch
input_mode_initial = "n"

# Row numbers
[numbers.row]
enable = true
relative = false

# Column numbers
[numbers.column]
enable = true
relative = false

[character_mirrors.x]
"/" = "\\"
"<" = ">"
"(" = ")"
"[" = "]"
"{" = "}"
[character_mirrors.y]
"/" = "\\"
"." = "'"
"," = "\""
"_" = "¨"

[input_mode.i]
handler = "Action"
base_keymaps = ["n"]

[input_mode.i.keymaps.actions]
"<BS>" = { MoveCursorBackInsertChar = { ch = " " }}
"" = { InsertCharMoveCursor = {}}

[input_mode.c]
handler = "Command"
base_keymaps = []
keymaps = {}

[input_mode.p]
handler = "ColorPicker"
base_keymaps = []
keymaps = {}

[input_mode.v]
handler = "Action"
base_keymaps = ["n"]

[input_mode.v.keymaps.actions]
"o" = { VisualRectSwapCorners = {} }
# "" = { VisualRectOperation = {  } }
"" = { Operation = { motion = { VisualRectMotion = {}}, return_to_standard_mode = true }}

[input_mode.n]
handler = "Action"
base_keymaps = ["i"]

[input_mode.n.keymaps.actions]
":" = { "ModeCommand" = { mode = "c" } }
"i" = { ModeInsert = { jump = "Diagonals", mode = "i" }}
"I" = { ModeInsert = { jump = "NoJump", mode = "i" }}
"gc" = { "ModeColorPicker" = { mode = "p" } }
"gp" = { "Pipette" = { slot = "Active" }}
"v" = { ModeVisualRect = { mode = "v" } }
"o" = { SetSelectionActive = { highlight = true } }
'"' = { SetYankActive = {} }
"O" = { HighlightSelectionClear = {} }
"P" = { Paste = {} }
"p" = { Paste = { slot = "Active" } }
"<C-p>" = { Paste = { slot = "Active" } }
"r" = { Operation = { motion = { Stay = {}}, operator = { Replace = {}}}}
"R" = { OperationMotionFirst = { operator = { Replace = {}}}}
"m" = { MarkSet = {}}
"#" = { SetColorOrSlotActive = {} }
"Kr" = { Operation = { motion = { Stay = {}}, operator = { Replace = { ch = "h"}}}}
# "" = { Operation = { operator = { Replace = { ch = "h"}}}}
# "" = { MoveCursor = { motion = { FixedNumberOfCells = {  }
"q" = { MacroRecordingStartStop = {} }
"gm" = { MirrorYank = { slot = "Active" }}
"<F5>" = { ReloadConfig = {} }
"<Up>" = { MoveCursor =  { motion = { Repeat = { count = 1, motion = { FixedNumberOfCells = { direction = [-1, 0], jump = "DirectionAsStride" }}}}}}
"<Down>" = { MoveCursor =  { motion = { Repeat = { count = 1, motion = { FixedNumberOfCells = { direction = [1, 0], jump = "DirectionAsStride" }}}}}}
"<Right>" = { MoveCursor =  { motion = { Repeat = { count = 1, motion = { FixedNumberOfCells = { direction = [0, 1], jump = "DirectionAsStride" }}}}}}
"<Left>" = { MoveCursor =  { motion = { Repeat = { count = 1, motion = { FixedNumberOfCells = { direction = [0, -1], jump = "DirectionAsStride" }}}}}}
"" = [
    { Repeat = {}},
    { Operation = {}},
    { MoveCursor = {}},
]

[input_mode.n.keymaps.action_repeats]
"" = { count = "FromKeystrokes", action = "FromKeystrokes" }

[input_mode.n.keymaps.actions_repeatable]
"u" = { "Undo" = {} }
"<C-r>" = { "Redo" = {} }
"@" = { MacroExecute = {} }

[input_mode.n.keymaps.operators]
"c" = { "Colorize" = { ground = "Foreground", color = "Active" } }
"C" = { "Colorize" = { ground = "Foreground" } }
"b" = { "Colorize" = { ground = "Background", color = "Active" } }
"B" = { "Colorize" = { ground = "Background" } }
"r" = { Replace = {} }
"S" = { UpdateSelection = { highlight = true } }
"a" = { UpdateSelection = { operator = "Add", slot = "Active", highlight = true } }
"z" = { UpdateSelection = { operator = "Subtract", slot = "Active", highlight = true } }
"s" = { UpdateSelection = { operator = "Overwrite", slot = "Active", highlight = true } }
"y" = { Yank = { content_type = "ALL", slot = "Active" } }
"D" = { Cut = { content_type = "ALL" } }
"d" = { Cut = { content_type = "ALL", slot = "Active" } }
"gc" = { ColorPickerOperator = { mode = "p"} }

[input_mode.n.keymaps.motions]
" " = { Stay = {} }
"S" = { SelectionMotion = {} }
"s" = { SelectionMotion = { slot = "Active" } }
"J" = { GoToMark = { jump = "Diagonals" } }
"L" = { GoToMark = { jump = "Diagonals", slot = "l" } }
"A" = { MatchingCells = {} }
"i" = { ContinuousRegion = { diagonals_allowed = false } }
"a" = { ContinuousRegion = { diagonals_allowed = true } }
"" = { Repeat = {} }

[input_mode.n.keymaps.motion_repeats]
"" = { count = "FromKeystrokes", motion = "FromKeystrokes" }

[input_mode.n.keymaps.motions_repeatable]
"w" = { WordBoundary = { boundary_type = "START" } }
"e" = { WordBoundary = { boundary_type = "END" } }
"f" = { FindChar = {} }
"," = { FindCharRepeat = { direction_reversed = false } }
";" = { FindCharRepeat = { direction_reversed = true } }
"" = { FixedNumberOfCells = { jump = "DirectionAsStride" }}

[input_mode.n.keymaps.counts]
"" = "TypeDecimal"

[input_mode.n.keymaps.directions]
"h" = [0, -1]
"<Left>" = [0, -1]
"j" = [1, 0]
"<Down>" = [1, 0]
"k" = [-1, 0]
"<Up>" = [-1, 0]
"l" = [0, 1]
"<Right>" = [0, 1]
"y" = [-1, -2]
"u" = [-1, -1]
"i" = [-1, 1]
"o" = [-1, 2]
"n" = [1, -2]
"m" = [1, -1]
"," = [1, 1]
"." = [1, 2]

[input_mode.n.keymaps.grounds]
"f" = "Foreground"
"b" = "Background"

[input_mode.n.keymaps.axes]
"x" = "X"
"y" = "Y"

[input_mode.n.keymaps.rotation_directions]
"k" = "Clockwise"
"j" = "Counterclockwise"

[input_mode.n.keymaps.characters]
"<C-u>-" = "—"
"" = "Type"

[input_mode.n.keymaps.bools]
"f" = false
"t" = true
"n" = false
" " = true

[input_mode.n.keymaps.word_boundary_types]
"a" = "ANY"
"s" = "START"
"e" = "END"

[input_mode.n.keymaps.colors]
" " = "Reset"
"b" = "Black"
"r" = "Red"
"g" = "Green"
"y" = "Yellow"
"l" = "Blue"
"m" = "Magenta"
"c" = "Cyan"
"w" = "Gray" # Non-bright white
"B" = "DarkGray" # Bright black
"R" = "LightRed"
"G" = "LightGreen"
"Y" = "LightYellow"
"L" = "LightBlue"
"M" = "LightMagenta"
"C" = "LightCyan"
"W" = "White"
# "s" = { Slot = "s" }

[input_mode.n.keymaps.color_or_slots]
"s" = { Slot = "FromKeystrokes" }
"" = [
    { Color = "FromKeystrokes" },
    { Slot = "FromKeystrokes" },
]

[input_mode.n.keymaps.test]
"h" = { a = "FromKeystrokes" }

[input_mode.n.keymaps.color_or_slot_specifications]
"" = { Specific = "FromKeystrokes" }

[input_mode.n.keymaps.color_picker_target_motions]
"" = { ground = "Foreground" }

[input_mode.n.keymaps.color_picker_targets]
" " = { ColorOrSlot = "Active" }
"" = [
    { Motion = {} },
    { ColorOrSlot = "FromKeystrokes" },
]

[input_mode.n.keymaps.canvas_iteration_jumps]
# "d" = "Diagonals"
"s" = "DirectionAsStride"

[input_mode.n.keymaps.update_selection_operators]
"a" = "Add"
"s" = "Overwrite"
"z" = "Subtract"

[input_mode.n.keymaps.cell_content_types]
"n" = "NONE"
"a" = "ALL"
"t" = "TEXT"
"f" = "FG"
"b" = "BG"
"c" = "COLOR"
"F" = "FG | TEXT"
"B" = "BG | TEXT"
"C" = "COLOR | TEXT"
"m" = "MODIFIERS"

[input_mode.n.keymaps.continuous_region_relative_types]
"w" = { NonBlank = "TEXT" }
"s" = { Same = "TEXT" }
# "W" = { NonBlank = {} }

[input_mode.n.keymaps.keymap_u32]
[input_mode.n.keymaps.selection_slot_specifications]
[input_mode.n.keymaps.selection_specifications]
"s" = { Slot = "FromKeystrokes" }
"" = [
    { Motion = "FromKeystrokes" },
]

[input_mode.n.keymaps.yank_slot_specifications]
